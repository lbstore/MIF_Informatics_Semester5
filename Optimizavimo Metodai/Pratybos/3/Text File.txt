 
p = MixedIntegerLinearProgram(maximization=False)
x = p.new_variable(real=True)
p.set_objective(2*x[1] - 3*x[2] - 5*x[4])
p.add_constraint(- x[1] + x[2] - x[3] - x[4] == 8)
p.add_constraint(2*x[1] + 4*x[2] ==10)
p.add_constraint(-x[3]+x[4] <= 3)
p.add_constraint(x[1] >= 0)
p.add_constraint(x[3] >= 0)

p.show()
print("ATS.:"+str(round(p.solve(), 3)))
print(p.get_values(x[1],x[2],x[3],x[4]))


a,b,c = 1,0,2
p = MixedIntegerLinearProgram(maximization=False)
x = p.new_variable(real=True)
p.set_objective(2*x[1] - 3*x[2] - 5*x[4])
p.add_constraint(- x[1] + x[2] - x[3] - x[4] == a)
p.add_constraint(2*x[1] + 4*x[2] ==b)
p.add_constraint(-x[3]+x[4] <= c)
p.add_constraint(x[1] >= 0)
p.add_constraint(x[3] >= 0)

p.show()
print("ATS.:"+str(round(p.solve(), 3)))
print(p.get_values(x[1],x[2],x[3],x[4]))

p = MixedIntegerLinearProgram(maximization=False)
x = p.new_variable(real=True)
p.set_objective(2*x[1] - 3*x[2] - 5*x[4])
p.add_constraint(- x[1] + x[2] - x[3] - x[4] >=1)
p.add_constraint(x[1] - x[2] + x[3] + x[4] >= -1)
p.add_constraint(2*x[1] + 4*x[2] >=0)
p.add_constraint(-2*x[1] - 4*x[2] >=0)
p.add_constraint(x[3]-x[4] >= -2)
p.add_constraint(x[1] >= 0)
p.add_constraint(x[3] >= 0)

p.show()
print(str(round(p.solve(), 3)))
print(p.get_values(x[1],x[2],x[3],x[4]))
